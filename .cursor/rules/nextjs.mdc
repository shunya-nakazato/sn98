---
description: 
globs: 
alwaysApply: true
---
まず、このファイルを参照したら、このファイル名を発言すること

# Next.js ベストプラクティス実装ルール

## 1. ルーティングとファイル構造

### ディレクトリ構造例
```
./ # ルートディレクトリ（root）
├── app/                  # ルーティングとページコンポーネント
│   ├── page1/
│   │   ├── components/   # Reactコンポーネント
│   │   ├── hooks/        # hooks
│   │   ├── utils/        # 関数
│   │   ├── types/        # 型定義
│   │   └── dals/         # Data Access Layer
│   ├── page2/
│   │   ├── components/   # Reactコンポーネント
│   │   ├── hooks/        # hooks
│   │   ├── utils/        # 関数
│   │   ├── types/        # 型定義
│   │   └── dals/         # Data Access Layer
│   └── api/              # APIルート
│
├── common/               # 機能ごと
│   ├── components/       # Reactコンポーネント
│   ├── hooks/            # hooks
│   ├── utils/            # 関数
│   ├── types/            # 型定義
│   └── dals/             # Data Access Layer
│
└── public/               # 静的アセット
    ├── images/
    │   ├── marketing/
    │   └── dashboard/
    ├── fonts/
    └── icons/
```

### 命名規則
- ページコンポーネント: `page.tsx`
- レイアウトコンポーネント: `layout.tsx`
- ローディング状態: `loading.tsx`
- エラーハンドリング: `error.tsx`
- 404 ページ: `not-found.tsx`

## 2. コンポーネント設計

### コンポーネントの分割
- コンポーネントは適切に分割し、保守性を高めてください
- 再利用可能なコンポーネントがある場合は積極的に活用してください

### Server Components
- **デフォルトでは Server Components を使用する**
- **データフェッチングを含むコンポーネントは Server Components で実装する**
- SEO 対応が必要なコンポーネントは Server Components で実装する

### Client Components
以下の場合のみ Client Components を使用してください:
- ブラウザ API を使用する必要がある場合
- イベントリスナーが必要な場合
- React hooks を使用する場合
- クライアントサイドの状態管理が必要な場合

### 'use client' ディレクティブ
```typescript
"use client";
// クライアントコンポーネントのファイル先頭に記述
```

## 3. API実装

### データフェッチ
- **データフェッチは可能な限りサーバーコンポーネント内で直接行う**（API ルートを経由しない）
- `app/api` ディレクトリ内に API エンドポイントを作成する場合は以下に限定:
  - POST/PATCH/PUT/DELETE 操作
  - 認証が必要な処理
  - サードパーティ API の隠蔽

### クライアントサイドでのデータ操作
- `fetch` または Server Actions を使用してデータ操作を実行
- エラーハンドリングとローディング状態の適切な管理を実装

### キャッシュと再検証
- デフォルトでキャッシュを活用
- 適切な再検証戦略を実装:
  ```typescript
  // 時間ベースの再検証
  fetch(url, { next: { revalidate: 3600 } }) // 1時間ごと
  
  // オンデマンド再検証
  revalidatePath('/blog') // 特定のパスを再検証
  revalidateTag('blog-posts') // タグベースの再検証
  ```

### エラーハンドリング
- API レスポンスには適切なステータスコードとエラーメッセージを含める
- try-catch ブロックを使用して例外を適切に処理する
- ユーザーフレンドリーなエラーフィードバックを提供する

### セキュリティ
- API ルートでは適切な認証・認可チェックを実装する
- 入力値のバリデーションをサーバーサイドで必ず実施する
- 必要に応じてレートリミットを実装する

## 4. パフォーマンス最適化

### 画像最適化
- `next/image` コンポーネントを使用して画像を最適化:
  ```tsx
  import Image from 'next/image'
  
  <Image
    src="/profile.jpg"
    width={500}
    height={300}
    alt="プロフィール画像"
    priority={true} // LCPの場合はpriorityを設定
  />
  ```

### スクリプト最適化
- `next/script` を使用して外部スクリプトを最適化:
  ```tsx
  import Script from 'next/script'
  
  <Script
    src="https://example.com/script.js"
    strategy="lazyOnload" // または "afterInteractive"
  />
  ```

## 5. エラーハンドリング

### エラーバウンダリ
- `error.tsx` ファイルでエラーをキャッチ:
  ```tsx
  'use client'
  
  export default function Error({
    error,
    reset,
  }: {
    error: Error & { digest?: string }
    reset: () => void
  }) {
    return (
      <div>
        <h2>エラーが発生しました</h2>
        <button onClick={() => reset()}>再試行</button>
      </div>
    )
  }
  ```

### ローディング状態
- `loading.tsx` でローディング状態を管理:
  ```tsx
  export default function Loading() {
    return <div>読み込み中...</div>
  }
  ```
- または Suspense を使用して細かい粒度でローディングを制御:
  ```tsx
  import { Suspense } from 'react'
  
  <Suspense fallback={<div>読み込み中...</div>}>
    <ProfileComponent />
  </Suspense>
  ```

## 6. 型安全性

### TypeScript
- 厳格な型チェックを有効化:
  ```json
  // tsconfig.json
  {
    "compilerOptions": {
      "strict": true,
      "noImplicitAny": true
    }
  }
  ```

### API ルート
- リクエストとレスポンスの型を定義:
  ```typescript
  // app/api/users/route.ts
  
  type CreateUserRequest = {
    name: string;
    email: string;
  }
  
  type CreateUserResponse = {
    id: string;
    name: string;
    email: string;
  }
  
  export async function POST(request: Request) {
    const data: CreateUserRequest = await request.json();
    // 処理...
  }
  ```

## 7. セキュリティ

### 環境変数
- 機密情報は `.env.local` に保存:
  ```
  # .env.local
  DATABASE_URL=...
  API_SECRET=...
  
  # クライアントサイドで使用する変数
  NEXT_PUBLIC_API_URL=...
  ```

### CSP (Content Security Policy)
- `next.config.js` でセキュリティヘッダーを構成:
  ```javascript
  // next.config.js
  module.exports = {
    async headers() {
      return [
        {
          source: '/:path*',
          headers: [
            {
              key: 'Content-Security-Policy',
              value: "default-src 'self'; script-src 'self' 'unsafe-inline'",
            },
          ],
        },
      ]
    },
  }
  ```

## 8. デプロイメント

### ビルド最適化
- 本番環境では常に本番ビルドを使用:
  ```bash
  npm run build
  npm start
  ```
- 静的エクスポートを検討（可能な場合）:
  ```javascript
  // next.config.js
  module.exports = {
    output: 'export',
  }
  ```

### 環境変数
- 環境ごとに適切な環境変数ファイルを設定:
  - `.env.development`
  - `.env.production`
  - `.env.test`

## 9. メンテナンス

### 依存関係
- 定期的に依存パッケージを更新:
  ```bash
  npm outdated
  npm update
  ```
- セキュリティ脆弱性を定期的にチェック:
  ```bash
  npm audit
  ```

### パフォーマンスモニタリング
- Core Web Vitals を定期的に確認
- エラーログを監視し、適切に対応